--------------------------------------------------------
--  File created - Saturday-June-01-2013   
--------------------------------------------------------
DROP TABLE "CHALLENGERESPONSE" cascade constraints;
DROP TABLE "CHALLENGERESPONSE_POLICY" cascade constraints;
DROP TABLE "PASSWORD_POLICY" cascade constraints;
DROP TABLE "QUESTIONMASTER" cascade constraints;
DROP TABLE "USERACTIVITIES" cascade constraints;
DROP TABLE "USERMASTER" cascade constraints;
DROP SEQUENCE "CHALLENGERESPONSE_CHALLENG_SEQ";
DROP SEQUENCE "CHALLENGERESPONSE_POLICY_C_SEQ";
DROP SEQUENCE "PASSWORD_POLICY_POLICY_ID_SEQ";
DROP SEQUENCE "QUESTIONMASTER_QNO_SEQ";
DROP SEQUENCE "USERACTIVITIES_ACTIVITY_ID_SEQ";
DROP SEQUENCE "USERMASTER_USERID_SEQ";
--------------------------------------------------------
--  DDL for Sequence CHALLENGERESPONSE_CHALLENG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHALLENGERESPONSE_CHALLENG_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence CHALLENGERESPONSE_POLICY_C_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "CHALLENGERESPONSE_POLICY_C_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence PASSWORD_POLICY_POLICY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "PASSWORD_POLICY_POLICY_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence QUESTIONMASTER_QNO_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "QUESTIONMASTER_QNO_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence USERACTIVITIES_ACTIVITY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USERACTIVITIES_ACTIVITY_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 401 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence USERMASTER_USERID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USERMASTER_USERID_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table CHALLENGERESPONSE
--------------------------------------------------------

  CREATE TABLE "CHALLENGERESPONSE" 
   (	"CHALLENGE_RESP_ID" NUMBER(38,2), 
	"USERID" VARCHAR2(50 CHAR), 
	"CHALLENGE_RESPONSE" CLOB, 
	"EPM_HOST_NAME" VARCHAR2(50 CHAR), 
	"LDAP_DOMAIN" VARCHAR2(50 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("CHALLENGE_RESPONSE") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table CHALLENGERESPONSE_POLICY
--------------------------------------------------------

  CREATE TABLE "CHALLENGERESPONSE_POLICY" 
   (	"CR_ID" NUMBER(10,0), 
	"MAXIMUM_NO_QUESTIONS" NUMBER(10,0), 
	"MINIMUM_NO_QUESTIONS" NUMBER(10,0), 
	"MINIMUM_NO_CORRECT" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PASSWORD_POLICY
--------------------------------------------------------

  CREATE TABLE "PASSWORD_POLICY" 
   (	"POLICY_ID" NUMBER(38,2), 
	"POLICY_DATE" DATE, 
	"PASSWORD_LENGTH" VARCHAR2(50 CHAR), 
	"BEGINS_NUMERIC" CHAR(10 CHAR), 
	"END_NUMERIC" CHAR(10 CHAR), 
	"BEGINS_SPECIAL" CHAR(10 CHAR), 
	"END_SPECIAL" CHAR(10 CHAR), 
	"SPECIAL_WORDS" VARCHAR2(50 CHAR), 
	"NUMERIC_CHARACTERS_MAX_LENGTH" VARCHAR2(50 CHAR), 
	"NUMERIC_CHARACTERS_MIN_LENGTH" VARCHAR2(50 CHAR), 
	"SPECIAL_CHARACTERS_MAX_LENGTH" VARCHAR2(50 CHAR), 
	"SPECIAL_CHARACTERS_MIN_LENGTH" VARCHAR2(50 CHAR), 
	"ENABLE_COMPLEXITY" CHAR(1 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table QUESTIONMASTER
--------------------------------------------------------

  CREATE TABLE "QUESTIONMASTER" 
   (	"QNO" NUMBER(38,2), 
	"QUESTION" VARCHAR2(100 CHAR), 
	"SET_QUESTION" CHAR(1 CHAR), 
	"NO_OF_QUESTION" VARCHAR2(50 CHAR), 
	"NO_OF_ANSWERS" VARCHAR2(50 CHAR), 
	"SET_ANSWERS" CHAR(1 CHAR), 
	"ANSWER" VARCHAR2(50 CHAR), 
	"RESPONSE_LENGTH" VARCHAR2(50 CHAR), 
	"MANDATORY" CHAR(1 CHAR), 
	"USER_DEFINED" CHAR(1 CHAR), 
	"USER_DEFINED_QUESTION" VARCHAR2(100 CHAR), 
	"USERID" NUMBER(10,0), 
	"ALLOWED_USER_QUESTIONS" CHAR(10 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USERACTIVITIES
--------------------------------------------------------

  CREATE TABLE "USERACTIVITIES" 
   (	"ACTIVITY_ID" NUMBER(10,0), 
	"USERNAME" VARCHAR2(50 CHAR), 
	"EPM_HOST_NAME" VARCHAR2(50 CHAR), 
	"LDAP_DOMAIN" VARCHAR2(50 CHAR), 
	"ACTIVITY_TYPE" VARCHAR2(50 CHAR), 
	"ACTIVITY_DATE" DATE, 
	"ACTIVITY_OP_DESC" CLOB, 
	"ACTIVITY_FROM_IP" VARCHAR2(20 CHAR), 
	"ACTIVITY_BY" VARCHAR2(50 CHAR), 
	"ACTIVITY_BY_ROLE" VARCHAR2(20 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("ACTIVITY_OP_DESC") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table USERMASTER
--------------------------------------------------------

  CREATE TABLE "USERMASTER" 
   (	"USERID" NUMBER(10,0), 
	"USERNAME" VARCHAR2(50 CHAR), 
	"FIRST_NAME" VARCHAR2(50 CHAR), 
	"LAST_NAME" VARCHAR2(50 CHAR), 
	"ADDRESS" VARCHAR2(250 CHAR), 
	"CITY" VARCHAR2(50 CHAR), 
	"STATE" VARCHAR2(50 CHAR), 
	"ZIP_CODE" VARCHAR2(50 CHAR), 
	"COUNTRY" VARCHAR2(50 CHAR), 
	"EMAIL_ADDRESS" VARCHAR2(50 CHAR), 
	"MOBILE" VARCHAR2(50 CHAR), 
	"USER_IMAGE" CLOB, 
	"EPM_HOST_NAME" VARCHAR2(50 CHAR), 
	"LDAP_DOMAIN" VARCHAR2(50 CHAR), 
	"IMAGE_TYPE" VARCHAR2(5 CHAR), 
	"MIDDLE_NAME" VARCHAR2(50 CHAR)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("USER_IMAGE") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
REM INSERTING into CHALLENGERESPONSE
SET DEFINE OFF;
REM INSERTING into CHALLENGERESPONSE_POLICY
SET DEFINE OFF;
Insert into CHALLENGERESPONSE_POLICY (CR_ID,MAXIMUM_NO_QUESTIONS,MINIMUM_NO_QUESTIONS,MINIMUM_NO_CORRECT) values (1,5,3,3);
REM INSERTING into PASSWORD_POLICY
SET DEFINE OFF;
Insert into PASSWORD_POLICY (POLICY_ID,POLICY_DATE,PASSWORD_LENGTH,BEGINS_NUMERIC,END_NUMERIC,BEGINS_SPECIAL,END_SPECIAL,SPECIAL_WORDS,NUMERIC_CHARACTERS_MAX_LENGTH,NUMERIC_CHARACTERS_MIN_LENGTH,SPECIAL_CHARACTERS_MAX_LENGTH,SPECIAL_CHARACTERS_MIN_LENGTH,ENABLE_COMPLEXITY) values (1,to_date('29-MAR-12','DD-MON-RR'),'8',null,null,null,null,null,null,null,null,null,'Y');
REM INSERTING into QUESTIONMASTER
SET DEFINE OFF;
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (1,'What is the name of your First School?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (2,'What is your Mother''s Maiden Name?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (3,'What is your Favourite Cuisine?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (4,'What is your Favourite Hobby?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (5,'Which is your Place of Birth?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (6,'Which is your Favourite Book?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (7,'What is your Date of Birth?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (8,'What is your Pet''s Name?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (9,'Who is your Favourite Actor?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (10,'What is your Best Friend''s Name?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (11,'What was your childhood nickname?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (12,'Who is your inspirational role model?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (13,'What is your favorite color?','N','3','3','N',null,'4','N','N',null,null,'1         ');
Insert into EPMDB.QUESTIONMASTER (QNO,QUESTION,SET_QUESTION,NO_OF_QUESTION,NO_OF_ANSWERS,SET_ANSWERS,ANSWER,RESPONSE_LENGTH,MANDATORY,USER_DEFINED,USER_DEFINED_QUESTION,USERID,ALLOWED_USER_QUESTIONS) values (14,'What is your favorite fictional character?','N','3','3','N',null,'4','N','N',null,null,'1         ');
REM INSERTING into USERACTIVITIES
SET DEFINE OFF;
REM INSERTING into USERMASTER
SET DEFINE OFF;
--------------------------------------------------------
--  Constraints for Table USERMASTER
--------------------------------------------------------

  ALTER TABLE "USERMASTER" MODIFY ("USERID" NOT NULL ENABLE);
 
  ALTER TABLE "USERMASTER" MODIFY ("USERNAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USERACTIVITIES
--------------------------------------------------------

  ALTER TABLE "USERACTIVITIES" MODIFY ("ACTIVITY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "USERACTIVITIES" MODIFY ("USERNAME" NOT NULL ENABLE);
 
  ALTER TABLE "USERACTIVITIES" MODIFY ("EPM_HOST_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "USERACTIVITIES" MODIFY ("LDAP_DOMAIN" NOT NULL ENABLE);
 
  ALTER TABLE "USERACTIVITIES" MODIFY ("ACTIVITY_TYPE" NOT NULL ENABLE);
 
  ALTER TABLE "USERACTIVITIES" MODIFY ("ACTIVITY_DATE" NOT NULL ENABLE);
 
  ALTER TABLE "USERACTIVITIES" MODIFY ("ACTIVITY_FROM_IP" NOT NULL ENABLE);
 
  ALTER TABLE "USERACTIVITIES" MODIFY ("ACTIVITY_BY" NOT NULL ENABLE);
 
  ALTER TABLE "USERACTIVITIES" MODIFY ("ACTIVITY_BY_ROLE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PASSWORD_POLICY
--------------------------------------------------------

  ALTER TABLE "PASSWORD_POLICY" MODIFY ("POLICY_ID" NOT NULL ENABLE);
 
  ALTER TABLE "PASSWORD_POLICY" MODIFY ("POLICY_DATE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CHALLENGERESPONSE_POLICY
--------------------------------------------------------

  ALTER TABLE "CHALLENGERESPONSE_POLICY" MODIFY ("CR_ID" NOT NULL ENABLE);
 
  ALTER TABLE "CHALLENGERESPONSE_POLICY" MODIFY ("MAXIMUM_NO_QUESTIONS" NOT NULL ENABLE);
 
  ALTER TABLE "CHALLENGERESPONSE_POLICY" MODIFY ("MINIMUM_NO_QUESTIONS" NOT NULL ENABLE);
 
  ALTER TABLE "CHALLENGERESPONSE_POLICY" MODIFY ("MINIMUM_NO_CORRECT" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table QUESTIONMASTER
--------------------------------------------------------

  ALTER TABLE "QUESTIONMASTER" MODIFY ("QNO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CHALLENGERESPONSE
--------------------------------------------------------

  ALTER TABLE "CHALLENGERESPONSE" MODIFY ("CHALLENGE_RESP_ID" NOT NULL ENABLE);
 
  ALTER TABLE "CHALLENGERESPONSE" MODIFY ("USERID" NOT NULL ENABLE);
 
  ALTER TABLE "CHALLENGERESPONSE" MODIFY ("EPM_HOST_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "CHALLENGERESPONSE" MODIFY ("LDAP_DOMAIN" NOT NULL ENABLE);
--------------------------------------------------------
--  DDL for Trigger CHALLENGERESPONSE_CHALLEN_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "CHALLENGERESPONSE_CHALLEN_TRIG" BEFORE INSERT OR UPDATE ON ChallengeResponse
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.Challenge_Resp_ID IS NULL THEN
    SELECT  ChallengeResponse_Challeng_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(Challenge_Resp_ID),0) INTO v_newVal FROM ChallengeResponse;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT ChallengeResponse_Challeng_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.Challenge_Resp_ID := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "CHALLENGERESPONSE_CHALLEN_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger CHALLENGERESPONSE_POLICY__TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "CHALLENGERESPONSE_POLICY__TRIG" BEFORE INSERT OR UPDATE ON ChallengeResponse_Policy
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.CR_ID IS NULL THEN
    SELECT  ChallengeResponse_Policy_C_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(CR_ID),0) INTO v_newVal FROM ChallengeResponse_Policy;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT ChallengeResponse_Policy_C_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.CR_ID := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "CHALLENGERESPONSE_POLICY__TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PASSWORD_POLICY_POLICY_ID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "PASSWORD_POLICY_POLICY_ID_TRIG" BEFORE INSERT OR UPDATE ON Password_Policy
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.Policy_ID IS NULL THEN
    SELECT  Password_Policy_Policy_ID_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(Policy_ID),0) INTO v_newVal FROM Password_Policy;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT Password_Policy_Policy_ID_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.Policy_ID := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "PASSWORD_POLICY_POLICY_ID_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger QUESTIONMASTER_QNO_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "QUESTIONMASTER_QNO_TRIG" BEFORE INSERT OR UPDATE ON QuestionMaster
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.Qno IS NULL THEN
    SELECT  QuestionMaster_Qno_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(Qno),0) INTO v_newVal FROM QuestionMaster;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT QuestionMaster_Qno_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.Qno := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "QUESTIONMASTER_QNO_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USERACTIVITIES_ACTIVITY_I_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "USERACTIVITIES_ACTIVITY_I_TRIG" BEFORE INSERT OR UPDATE ON UserActivities
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.activity_id IS NULL THEN
    SELECT  UserActivities_activity_id_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(activity_id),0) INTO v_newVal FROM UserActivities;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT UserActivities_activity_id_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.activity_id := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "USERACTIVITIES_ACTIVITY_I_TRIG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USERMASTER_USERID_TRIG
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "USERMASTER_USERID_TRIG" BEFORE INSERT OR UPDATE ON UserMaster
FOR EACH ROW
DECLARE 
v_newVal NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.UserID IS NULL THEN
    SELECT  UserMaster_UserID_SEQ.NEXTVAL INTO v_newVal FROM DUAL;
    -- If this is the first time this table have been inserted into (sequence == 1)
    IF v_newVal = 1 THEN 
      --get the max indentity value from the table
      SELECT NVL(max(UserID),0) INTO v_newVal FROM UserMaster;
      v_newVal := v_newVal + 1;
      --set the sequence to that value
      LOOP
           EXIT WHEN v_incval>=v_newVal;
           SELECT UserMaster_UserID_SEQ.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.UserID := v_newVal;
  END IF;
END;
/
ALTER TRIGGER "USERMASTER_USERID_TRIG" ENABLE;
